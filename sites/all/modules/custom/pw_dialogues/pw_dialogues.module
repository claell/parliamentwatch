<?php

/**
 * @file
 * Module for the dialogue import.
 */

include_once 'pw_dialogues.features.inc';

/**
 * A buffer of overlap between the imports in seconds.
 */
define('PW_DIALOGUES_INTERVAL', 86400); // one day buffer

/**
 * Implements hook_menu().
 */
function pw_dialogues_menu() {
  $menu['admin/config/pw/dialogues/settings'] = array(
    'title' => 'Dialogue importer',
    'description' => 'Configure the source URL for the dialogue importer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_dialogues_admin_settings_form'),
    'access arguments' => array('import dialogue_importer feeds'),
    'file' => 'pw_dialogues.admin.inc',
  );

  $menu['admin/config/pw/dialogues'] = array(
    'title' => 'Dialogue importer',
    'description' => 'Mass re-import dialogues.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_dialogues_admin_reimport'),
    'access arguments' => array('import dialogue_importer feeds'),
    'file' => 'pw_dialogues.admin.inc',
  );

  $menu['api/import/dialogue/%'] = array(
    'title' => 'imports dialogue',
    'access arguments' => array('access content'),
    'page callback' => 'pw_dialogues_triggered_import',
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $menu;
}

/**
 * Implements hook_menu().
 */
function pw_dialogues_triggered_import() {
  drupal_add_http_header('Content-type', 'text/plain; charset=utf8');
  $debug_message = array();
  $debug_message['request_uri'] = request_uri();
  $return_value = 'FAILED';
  if (is_numeric(arg(3))) {

    // prepare for import
    $dialogue_id = arg(3);
    $source = variable_get('pw_dialogues_importer_source');
    $source .= $dialogue_id;
    $source .= '?unreleased=1';
    $debug_message['source'] = $source;

    // retrieve what to do (delete, create, ...)
    $doc = new DOMDocument();
    $doc->preserveWhiteSpace = false;
    $doc->load($source);
    $xpath = new DOMXpath($doc);
    $xlist_status = $xpath->query("//message[type='question']/status");
    $xnode_status = $xlist_status->item(0)->nodeValue;

    // do import
    pw_dialogues_do_import_questions($source);

    // check if dialogue was imported
    $efq_nodes = new EntityFieldQuery();
    $efq_nodes->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'dialogue')
      ->fieldCondition('field_dialogue_id', 'value', $dialogue_id);
    $result = $efq_nodes->execute();
    $debug_message['result'] = $result;

    // dialogue found
    if (isset($result['node'])) {
      $dialogue_nid = key($result['node']);
      $node = node_load($dialogue_nid);
      $recipient_id = $node->field_dialogue_recipient['und'][0]['target_id'];

      // delete answers and re-import them
      /* $sql = "SELECT cid FROM {comment} WHERE nid=:nid";
      $cids_to_delete = db_query($sql, array(':nid' => $dialogue_nid))->fetchCol();
      $debug_message['cids_to_delete'] = $cids_to_delete;
      comment_delete_multiple($cids_to_delete);*/
      pw_dialogues_do_import_answers($source);

      // set return_value to OK
      if (is_numeric($recipient_id) && ($user = user_load($recipient_id)) || $node->status != 1) {
        $return_value = 'OK';
        if (function_exists('pw_userarchives_cron')) {
          pw_userarchives_cron($recipient_id);
        }
      }
    }

    // node deleted
    elseif($xnode_status != 1 && !isset($result['node'])){
      $return_value = 'OK';
    }
  }

  _pw_send_debug_mail('Import ' . $return_value . ': ' . request_uri(), $debug_message);
  print $return_value;
}

/**
 * Implements hook_cron().
 * imports all dialugues once at night.
 * Normally all dialogues should be already imported
 * by push request to api/import/dialogue/% via the moderation backend.
 */
function pw_dialogues_cron() {

  // get import base url
  if ($source = variable_get('pw_dialogues_importer_source')) {

    // append the updated_since GET parameter to the source URL.
    if ($last_import = variable_get('pw_dialogues_importer_last_import', 0)) {

      // import only every X days / hours/ etc
      if ($last_import < time() - PW_DIALOGUES_INTERVAL) {

        // import buffer: 1.5 of import interval
        $updated_since_timestamp = $last_import - PW_DIALOGUES_INTERVAL * 1.5;
        $updated_since = date('Y-m-d\\TH:i:s', $updated_since_timestamp);
        if (strpos($source, '?') === FALSE) {
          $source .= '?updated_since=' . $updated_since;
        }
        else {
          $source .= '&updated_since=' . $updated_since;
        }

        // do the import
        pw_dialogues_do_import_questions($source);
        pw_dialogues_do_import_answers($source);

        // trigger userarchive cron which
        if (function_exists('pw_userarchives_cron')) {

          // query which politicians have a changed question and answer count.
          $users = db_query('SELECT DISTINCT f.field_dialogue_recipient_target_id
            FROM {field_data_field_dialogue_recipient} AS f
            INNER JOIN {feeds_item} AS i ON f.entity_type = i.entity_type AND f.entity_id = i.entity_id
            WHERE i.imported >= :imported', array(':imported' => $updated_since_timestamp))->fetchCol();

          // rewrite user archive cache table
          foreach ($users as $uid) {
            pw_userarchives_cron($uid);
          }
        }

        // save last import date
        variable_set('pw_dialogues_importer_last_import', REQUEST_TIME);
      }
    }
  }
}

/**
 * starts feeds import
 */
function pw_dialogues_do_import_questions($source) {

  // Import dialogues (questions).
  $dialogue_feed = feeds_source('dialogue_importer');
  $dialogue_feed->addConfig(array(
    'FeedsHTTPFetcher' => array(
      'source' => $source,
    ),
  ));
  while (FEEDS_BATCH_COMPLETE != $dialogue_feed->import()) {
    ;
  }

  // add watchdog message
  watchdog('dialogue_importer', 'questions imported from ' . $source);

  return TRUE;
}

function pw_dialogues_do_import_answers($source) {

  // Import messages (answers).
  $message_feed = feeds_source('dialogue_message_importer');
  $message_feed->addConfig(array(
    'FeedsHTTPFetcher' => array(
      'source' => $source,
    ),
  ));
  while (FEEDS_BATCH_COMPLETE != $message_feed->import()) {
    ;
  }

  // add watchdog message
  watchdog('dialogue_message_importer', 'answers imported from ' . $source);

  return TRUE;
}

/**
 * modifies data on dialogue save (or import via api).
 *
 */
function pw_dialogues_entity_presave($entity, $type) {

  // Force URL alias for dialogues
  if ($type == 'node' && $entity->type == 'dialogue' && $entity->nid) {
    module_load_include('inc', 'pathauto');
    $entity->path['pathauto'] = TRUE;
    $alias_action = variable_get('pathauto_update_action', 0);
    variable_set('pathauto_update_action', PATHAUTO_UPDATE_ACTION_DELETE);
    $entity->path = pathauto_node_update_alias($entity, 'update');
    variable_set('pathauto_update_action', $alias_action);
  }

  // delete dialogue answer if its status is 0
  /*
  elseif ($type == 'comment' && $entity->status == 0) {
    //entity_delete($type, $entity->cid);

    // look for empty answers and delete them
    $cids_to_delete = db_query("SELECT c.cid
                       FROM comment c
                       INNER JOIN field_data_comment_body body ON c.cid = body.entity_id AND body.bundle = 'comment_node_dialogue'
                       LEFT OUTER JOIN field_data_field_dialogue_comment_body c_body ON c_body.entity_type = 'comment' AND c.cid = c_body.entity_id
                       WHERE c_body.field_dialogue_comment_body_value IS NULL")->fetchCol();
    if (!empty($cids_to_delete)) {
      comment_delete_multiple($cids_to_delete);
      watchdog('pw_dialogues_entity_presave', 'empty answers deleted, cids: ' . implode(', ', $cids_to_delete));
    }

    //if (!empty($result)) {
    //$cids_to_delete = array_keys($result['comment']);
    //comment_delete_multiple($cids_to_delete);
    //watchdog('pw_dialogues_cron', 'empty answers deleted, cids: '.implode(', ', $cids_to_delete));
    //}

  }
  */
}

/**
 *  Implements hook_feeds_presave().
 */
function pw_dialogues_feeds_presave(FeedsSource $source, $entity, $item) {

  if ($source->id == 'dialogue_importer' || $source->id == 'dialogue_message_importer') {

    // delete and skip item instead of importing
    if (!$entity->status) {

      // skip item
      $entity->feeds_item->skip = TRUE;

      // delete dialogue node (question)
      if ($entity->nid && !isset($entity->cid)) {
        entity_delete("node", $entity->nid);
      }

      // delete dialogue comments (answers)
      elseif ($entity->cid) {
        entity_delete("comment", $entity->cid);
      }
    }

    // remove empty attachments
    elseif (isset($entity->field_dialogue_documents['und'][0]['url']) && empty($entity->field_dialogue_documents['und'][0]['url'])) {
      $entity->field_dialogue_documents = NULL;
    }
    else {

      // add title to link
      foreach ($entity->field_dialogue_documents['und'] as &$document) {
        $document['title'] = basename($document['url']);
      }
    }
  }
}

