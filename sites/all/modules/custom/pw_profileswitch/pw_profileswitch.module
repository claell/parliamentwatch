<?php

/**
 * @file
 * Code for the PW Profiles feature. Implements the switch of the user profile view
 * depending on the role of the users whose profile is shown.
 */

/**
 * Implements the switch between standard and premium profile display modes
 * dependant on user role. The assignment can be configured in the admin part of
 * this module.
 *
 * @param type $account
 * @param type $view_mode
 * @param type $langcode
 * @return type
 */
function pw_profileswitch_user_custom_view($account, $view_mode = 'full', $langcode = NULL) {

  // redirect profile to legacy platform if anonymous user
  global $user;
  if($user->uid == 0 && !empty($account->field_user_external_url['und'][0]['url'])){

    $parliament = _pw_get_current_parliament_term();
    if(!empty($parliament) && $parliament->name == 'Bundestag'){
      $request_uri = parse_url(request_uri());
      $redirect_url = $account->field_user_external_url['und'][0]['url'];
      drupal_goto($redirect_url, array(), 307);
    }
  }

  // set custom page title
  pw_user_set_custom_title($account);

  // retrieve user roles of the field field_user_roles_for_view_mode_switch:
  $assignedRoles = array();
  foreach ($account->field_user_roles_for_view_mode_s['und'] as $role) {
    $assignedRoles[$role['tid']] = $role['tid'];
  }

  $assignment = variable_get('pw_profileswitch_assignment', array()); // array(roleId => displayModeId)
  foreach ($assignment as $rid => $did) {
    if (array_key_exists($rid, $assignedRoles)) { // old: $account->roles
      $view_mode = $did;
      break; // "First role wins": We assume role assignments to users to be DISTINCT!
    }
  }

  // set custom breadcrumb
  // pw_user_set_custom_breadcrumb($account);

  return user_view($account, $view_mode, $langcode);
}

/**
 * Set custom breadcrumb for user revision.
 */
function pw_user_set_custom_breadcrumb($account){
  return;
  // custom breadcrumb
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Parliaments'), 'parlamente-210-0.html');
  if(!empty($account->field_user_parliament['und'][0]['tid'])){
    $parliament_term = taxonomy_term_load($account->field_user_parliament['und'][0]['tid']);
    $breadcrumb[] = l($parliament_term->name, strtolower($parliament_term->name));
    $is_deputy = array_search('Deputy', $account->roles);
    if($is_deputy){
      $path_alias = drupal_lookup_path('alias', 'profile/'.strtolower($parliament_term->name).'/deputies');
      $path_profiles = $path_alias?$path_alias:'profile/'.strtolower($parliament_term->name).'/deputies';
    }
    else{
      $path_alias = drupal_lookup_path('alias', 'profile/'.strtolower($parliament_term->name).'/candidates');
      $path_profiles = $path_alias?$path_alias:'profile/'.strtolower($parliament_term->name).'/candidates';
    }
    $breadcrumb[] = l(t('Profiles Overview'), $path_profiles);
  }
  $account_full_name = $account->field_user_fname['und'][0]['value'].' '.$account->field_user_lname['und'][0]['value'];
  #$breadcrumb[] = l($account_full_name, current_path());
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Set custom page title for user and user revision.
 */
function pw_user_set_custom_title($account){
  if(arg(0) == 'profile' || arg(0) == 'user'){
    $title = field_get_items('user', $account, 'field_user_title');
    $first_name = field_get_items('user', $account, 'field_user_fname');
    $last_name = field_get_items('user', $account, 'field_user_lname');
    drupal_set_title(trim($title[0]['value'].' '.$first_name[0]['value'].' '.$last_name[0]['value']));
  }
}

/**
 * Show a revision.
 */
function pw_user_revision_show($username, $vid) {

  $user = user_load_by_name($username);
  if ($user->uid == "0") {

    // Load user by vid:
    $query = db_select('user_revision', 'ur');
    $query->addField('ur', 'uid');
    $query->condition('ur.vid', $vid); // This is the primary ID of the table
    $res = $query->execute();
    while ($row = $res->fetchAssoc()) {
      $account = user_revision_load($row["uid"], $vid); // Can only be one result maximum
    }
  } else {
    $account = user_revision_load($user->uid, $vid);
  }
  return pw_profileswitch_user_custom_view($account);
}

/**
 * Modify the default page callbacks from user.and user revisions modules to a custom one.
 * This is needed for the display mode switch between standard profiles and premium profiles.
 *
 * @param array $items
 */
function pw_profileswitch_menu_alter(&$items) {
  $items['user/%user']['page callback'] = 'pw_profileswitch_user_view_page';
//  $items['profile/%/archive/%'] = array(
//    'page callback' => 'pw_user_revision_show',
//    'page arguments' => array(1, 3),
//    'access callback' => true,
//  );
  $items['user/%/revisions/%/view'] = array(
    'page callback' => 'pw_user_revision_show',
    'page arguments' => array(1, 3),
    'access callback' => 'user_view_access', // default access callback for users
    'access arguments' => array(1),
    );
}

/**
 * Function overtaken from user.module and customized to call pw_profileswitch_user_custom_view()
 *
 * @param type $account
 * @return type
 */
function pw_profileswitch_user_view_page($account) {
  // An administrator may try to view a non-existent account,
  // so we give them a 404 (versus a 403 for non-admins).
  return is_object($account) ? pw_profileswitch_user_custom_view($account) : MENU_NOT_FOUND;
}

/**
 * Implementation of hook_menu().
 */
function pw_profileswitch_menu() {
  $items['admin/config/pw/pw_profileswitch/settings'] = array(
    'title' => 'PW Profileswitch settings',
    'description' => 'Connect User Roles with Display Modes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_profileswitch_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pw_profileswitch.admin.inc',
    );
  return $items;
}
