<?php

/**
 * @file pw_donation_form.module
 * helper functions for donation form.
 */

include_once 'pw_donation_form.features.inc';

/**
 * Add module css and js
 */
//drupal_add_css(drupal_get_path('module', 'pw_donation_form') .'/pw_donation_form.css','all');
//drupal_add_js(drupal_get_path('module', 'pw_donation_form') . '/pw_donation_form.js');


/**
 * Implements hook_form_alter()..
 */
function pw_donation_form_form_alter(&$form, &$form_state, $form_id) {
  // Modify the donation form
  if ($form_id == 'webform_client_form_10508') {
    pw_donation_form_set_empty_value($form['submitted']['fieldset_donationform_yourdonation']['donation_target']);
    pw_donation_form_set_empty_value($form['submitted']['fieldset_donationform_yourdata']['personal_prefix']);

    // Load query parameters
    $getparams = drupal_get_query_parameters();

    // Set default frequency value to monthly if parameter 'recurring' is set.
    if (isset($getparams["recurring"]) && ($getparams["recurring"] == 1 || $getparams["recurring"] == "")) {
      $form['submitted']['fieldset_donationform_yourdonation']['donation_frequency']['#default_value'] = "1";
    }

    // Detect and set donation campaign (e.g. petitions)
    if (isset($getparams["campaign_id"]) && check_plain($getparams["campaign_id"])) {
      $campaign_id = check_plain($getparams["campaign_id"]);
      $form['submitted']['fieldset_donationform_civicrm']['civicrm_contribution_campaign_id']['#value'] = $campaign_id;
    }

    // Set donation amount by parameter
    if (isset($getparams["amount"]) && is_int((int) $getparams["amount"]) && $getparams["amount"] > 0) {
      if (in_array($getparams["amount"], array(
        "10",
        "20",
        "50",
        "100"
      ))) { // Check for default form values
        $form['submitted']['fieldset_donationform_yourdonation']['donation_amount']['#default_value'] = $getparams["amount"];
    }
      else { // If amount is not in default values, use the free_amount field.
        $form['submitted']['fieldset_donationform_yourdonation']['donation_amount']['#default_value'] = "free";
        $form['submitted']['fieldset_donationform_yourdonation']['donation_free_amount']['#default_value'] = $getparams["amount"];
      }
    }

    // Custom validations
    $form['#validate'][] = 'pw_donation_form_form_validate';
  }
}

// set empty value of select list
function pw_donation_form_set_empty_value(&$element) {
  $element['#empty_option'] = '- ' . $element['#title'] . ' -';
}

/**
 * Implements hook_form_process_date()..
 * sets day value and visibility
 */
function pw_donation_form_process_date(&$element) {

  // change day type to hidden
  $element['day']['#type'] = 'hidden';

  // set value for day
  if (!empty($element['#value']['month']) && !empty($element['#value']['year'])) {
    if ($element['#value']['year'] . '-' . $element['#value']['month'] > date('Y-n')) {
      $element['day']['#value'] = '1';
    }
    else {
      $element['day']['#value'] = date('d');
    }
  }
  else {
    $element['day']['#value'] = '';
  }

  return $element;
}

/**
 * Implements hook_form_validate()..
 * custom validations on webform submission
 */
function pw_donation_form_form_validate($form_id, $form_values) {

  // check if amount is higher than 5 euros
  if ($form_values['values']['submitted']['fieldset_donationform_yourdonation']['donation_amount'] == 'free' && $form_values['values']['submitted']['fieldset_donationform_yourdonation']['donation_free_amount'] < 5) {
    form_set_error("donation_amount_free", 'Bitte tragen Sie einen Wert über 5 Euro ein.');
  }
}

/**
 * Implements hook_webform_csv_data_alter()..
 * alters data before export of CSV file
 */
function pw_donation_form_webform_csv_data_alter(&$data, $component) {
  if ($component['nid'] == 10508) {
    switch ($component['form_key']) {
      case 'option_newsletter':
      case 'option_not_anonymous':
      $data = $data[0] == 'X' ? 'yes' : 'no';
      break;
    }
  }
}

/**
 * Implements hook_webform_submission_presave()..
 * alters data before submission will be saved
 */
function pw_donation_form_webform_submission_presave($node, &$submission) {

  if ($node->nid == 10508) {

    // map ids to relevant components
    $form_values = _pw_webform_get_keyed_fields($node, $submission);

    // set newsletter group for civicrm
    if (!empty($form_values['option_newsletter'])) {
      $form_values['civicrm_groups'] = 'abgeordnetenwatch.de Newsletter';
    }

    // set amout to be charged based on selected frequency and amount
    if ($form_values['donation_amount'] == 'free') {
      $form_values['civicrm_amount'] = $form_values['donation_free_amount'];
    }
    elseif ($form_values['donation_frequency'] == '0') {
      $form_values['civicrm_amount'] = $form_values['donation_amount'];
    }
    else {
      $form_values['civicrm_amount'] = $form_values['donation_frequency'] * $form_values['donation_amount'];
    }

    // update donation amount when node has related field and submission is new (sid not set)
    if(!isset($submission->sid)){
      $donation_node = menu_get_object("node", 1, $form_values['node_path']);
      if ($donation_node && !empty($donation_node->field_donation_amount)) {
        $donation_node->field_donation_amount['und'][0]['value'] += $form_values['civicrm_amount'];
        node_save($donation_node);
      }
    }

    // set direct debit or sepa
    if (preg_match('/[a-z]{2}/i', $form_values['payment_account'])) {
      $form_values['payment_sepa_holder'] = $form_values['payment_holder'];
      $form_values['payment_sepa_iban'] = $form_values['payment_account'];
      $form_values['payment_sepa_bic'] = $form_values['payment_bank'];
    }
    else {
      $form_values['payment_direct_debit_holder'] = $form_values['payment_holder'];
      $form_values['payment_direct_debit_account'] = $form_values['payment_account'];
      $form_values['payment_direct_debit_bank'] = $form_values['payment_bank'];
    }

    // set contribution type
    $form_values['civicrm_contribution_type'] = $form_values['donation_frequency'] == 0 ? 'Spende Parlamentwatch e.V.' : 'Fördermitglied';

    // set date start
    $form_values['civicrm_date_start'] = date('Y-m-d H:i', $submission->submitted);

    // set description text
    $form_values['civicrm_description'] = 'Webform - ' . date('Y-m-d H:i');
  }
}
